/*
 * This software is in the public domain under CC0 1.0 Universal plus a 
 * Grant of Patent License.
 * 
 * To the extent possible under law, the author(s) have dedicated all
 * copyright and related and neighboring rights to this software to the
 * public domain worldwide. This software is distributed without any
 * warranty.
 * 
 * You should have received a copy of the CC0 Public Domain Dedication
 * along with this software (see the LICENSE.md file). If not, see
 * <http://creativecommons.org/publicdomain/zero/1.0/>.
 */

apply plugin: 'groovy'

sourceCompatibility = '1.8'
def componentNode = parseComponent(project)
version = componentNode.'@version'
def jarBaseName = componentNode.'@name'
def moquiDir = projectDir.parentFile.parentFile.parentFile
def frameworkDir = file(moquiDir.absolutePath + '/framework')

// to run use "gradle dependencyUpdates"
apply plugin: 'com.github.ben-manes.versions'
buildscript {
  repositories { jcenter() }
  dependencies { classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0' }
}
dependencyUpdates.resolutionStrategy = { componentSelection { rules -> rules.all { ComponentSelection selection ->
    boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'pr'].any { qualifier -> selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/ }
    if (rejected) selection.reject('Release candidate')
} } }

repositories {
    flatDir name: 'localLib', dirs: frameworkDir.absolutePath + '/lib'
    jcenter()
}

dependencies {
    compile project(':framework')

    // ElasticSearch Libraries, including Lucene
    compile 'org.elasticsearch:elasticsearch:5.6.2' // Apache 2.0
    // ElasticSearch uses jackson-dataformat-smile, -yaml, -cbor pulling in jackson-core, also used by OrientDB, but gets an older version
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-smile:2.9.1'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.1'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.9.1'
    // JNA, needed by ElasticSearch when running embedded, now included as a dependency: compile 'net.java.dev.jna:jna:4.5.0' // Apache 2.0
    // not currently needed/used: compile 'net.java.dev.jna:jna-platform:4.5.0' // Apache 2.0

    // modules: when updating these update the versions in the plugin-descriptor.properties files in home/modules/*
    compile module('org.codelibs.elasticsearch.module:lang-groovy:5.6.2')
    compile 'org.codelibs.elasticsearch.module:transport-netty4:5.6.2'
    compile 'org.codelibs.elasticsearch.module:reindex:5.6.2'
    compile 'org.codelibs.elasticsearch.module:parent-join:5.6.2'

    // painless script needs antlr4, asm-all (if added put in framework and do modules for pegdown/parboiled so it it shared)
    // problem with lang-painless: 450KB jar file, can't come from jcenter so far, so using groovy in spite of warnings
    // NOTE from additional attempt: if asm-debug-all jar goes in framework libs it gets loaded by parent/root ClassLoader so
    //     MClassloader loaded classes, ie those in component lib directories, can't be found as it uses getClass().getClassLoader()
    // antlr4 needed for painless script module
    // compile 'org.antlr:antlr4-runtime:4.5.3'

}

// by default the Java plugin runs test on build, change to not do that (only run test if explicit task)
check.dependsOn.remove(test)
task cleanLib(type: Delete) { delete fileTree(dir: projectDir.absolutePath+'/lib', include: '*') }
clean.dependsOn cleanLib

jar {
    destinationDir = file(projectDir.absolutePath + '/lib')
    baseName = jarBaseName
}
task copyDependencies { doLast {
    copy { from (configurations.runtime - project(':framework').configurations.runtime - project(':framework').jar.archivePath)
        into file(projectDir.absolutePath + '/lib') }
} }
copyDependencies.dependsOn cleanLib
jar.dependsOn copyDependencies
